{"data":{"markdownRemark":{"html":"<p>Letâ€™s talk about <a href=\"http://eslint.org/docs/rules/comma-dangle\">comma-dangle</a>. More specifically, letâ€™s talk about why you need to be using this eslint rule in your open source projects. Actually, scratch that. This is something thatâ€™s best learned through examples. Allow me to walk you through what happens when you donâ€™t use the comma-dangle rule.</p>\n<h2>The Example</h2>\n<p>Okay, so letâ€™s pretend we have an awesome open source project we just created called beer.js. Letâ€™s go ahead and add some exports to our package</p>\n<pre><code>+ export default const beer = {\n+   type: \"IPA\",\n+   oz: \"16\"\n+ };\n</code></pre>\n<p>See all the lines prefixed with a `+`? Those signify new additions to our repo. For our initial commit, weâ€™re gonna have `4` line additions and `0` deletions. Letâ€™s go ahead and add another value to our beer object</p>\n<pre><code>  export default const beer = {\n    type: \"IPA\",\n~   oz: \"16\",\n+   empty: false\n  };\n</code></pre>\n<p>Now what happened here? We only added one value to our export, yet git is going to show `1` addition and `1` modification. No doubt our commit message is going to be along the lines of `chore(core): add empty prop to beer export`, and thereâ€™s absolutely nothing wrong with that! The problem is that the `oz` line is modified in that commit as well.</p>\n<h2>With comma-dangle</h2>\n<p>Now letâ€™s look at the exact same git history, but this time letâ€™s enforce the `comma-dangle` rule.</p>\n<pre><code>+ export default const beer = {\n+   type: \"IPA\",\n+   oz: \"16\",\n+ };\n</code></pre>\n<p>Again, our initial commit has a clean `4++++0----` history. Now letâ€™s go ahead and append another export onto this</p>\n<pre><code>  export default const beer = {\n    type: \"IPA\",\n    oz: \"16\",\n+   empty: false,\n  };\n</code></pre>\n<p>ðŸ’¥ BOOM! Now our commit history is going to be clean and concise. No more modifying lines just to add commas, let 'em dangle!</p>\n<h2>Should I always use the comma-dangle?</h2>\n<p>Nope! Only when dealing with multiline objects/arrays. The easiest way to configure this, is to add the comma-dangle rule to your .eslintrc</p>\n<pre><code>{\n  \"rules\": {\n    \"comma-dangle\": [\"error\", \"always-multiline\"]\n  }\n}\n</code></pre>\n<p><em>(ironically, trailing commas are unsupported in JSON)</em></p>","frontmatter":{"title":"Why comma-dangle is important in your open source projects"}}},"pageContext":{"slug":"/posts/comma-dangle/"}}